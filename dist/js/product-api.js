const CACHE_DURATION=18e5,PRODUCT_CACHE=new Map;async function fetchProductData(t){const n=PRODUCT_CACHE.get(t);if(n&&Date.now()-n.timestamp<18e5)return console.log(`[ProductAPI] Serving cached data for variant ${t}`),n.data;console.log(`[ProductAPI] Fetching fresh data for variant ${t}`);try{const n="\n      query ProductVariantData($variantId: ID!) {\n        node(id: $variantId) {\n          ... on ProductVariant {\n            id\n            title\n            price {\n              amount\n              currencyCode\n            }\n            compareAtPrice {\n              amount\n              currencyCode\n            }\n            product {\n              id\n              title\n              description\n              images(first: 1) {\n                edges {\n                  node {\n                    url\n                    altText\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    ",r=await fetch("/.netlify/functions/shopify-proxy",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:n,variables:{variantId:t}})});if(!r.ok){const t=await r.text();throw new Error(`API request failed: ${r.status} - ${t}`)}const e=await r.json();if(e.errors)throw new Error(`GraphQL errors: ${JSON.stringify(e.errors)}`);const a=e.data.node;return PRODUCT_CACHE.set(t,{data:a,timestamp:Date.now()}),a}catch(t){return console.error("[ProductAPI] Error fetching product data:",t),null}}function formatPrice(t,n="USD"){if("number"!=typeof t&&(t=parseFloat(t)),isNaN(t))return"$0.00";try{return new Intl.NumberFormat("en-US",{style:"currency",currency:n}).format(t)}catch(n){return`$${t.toFixed(2)}`}}export{fetchProductData,formatPrice};