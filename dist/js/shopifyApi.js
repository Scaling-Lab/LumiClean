export const CartFragment="\nfragment CartFragment on Cart {\n  id\n  checkoutUrl\n  totalQuantity\n  cost {\n    subtotalAmount { amount currencyCode }\n    totalAmount { amount currencyCode }\n  }\n  lines(first: 50) {\n    nodes {\n      id\n      quantity\n      cost { totalAmount { amount currencyCode } }\n      merchandise { \n        ... on ProductVariant { \n          id \n          title \n          sku\n          price { amount currencyCode } \n          compareAtPrice { amount currencyCode } \n          image { url altText } \n          product { \n            id \n            handle \n            title \n            collections(first: 5) {\n              nodes { title } \n            } \n          } \n        } \n      }\n    }\n  }\n  discountCodes { applicable code }\n  buyerIdentity { email phone }\n  attributes { key value }\n}";export const CREATE_CART_MUTATION=`mutation cartCreate($cartInput: CartInput!) { cartCreate(input: $cartInput) { cart { ...CartFragment } userErrors { field message } } } ${CartFragment}`;export const FETCH_CART_QUERY=`query getCart($cartId: ID!) { cart(id: $cartId) { ...CartFragment } } ${CartFragment}`;export const ADD_TO_CART_MUTATION=`mutation cartLinesAdd($cartId: ID!, $lines: [CartLineInput!]!) { cartLinesAdd(cartId: $cartId, lines: $lines) { cart { ...CartFragment } userErrors { field message } } } ${CartFragment}`;export const REMOVE_FROM_CART_MUTATION=`mutation cartLinesRemove($cartId: ID!, $lineIds: [ID!]!) { cartLinesRemove(cartId: $cartId, lineIds: $lineIds) { cart { ...CartFragment } userErrors { field message } } } ${CartFragment}`;export const UPDATE_CART_LINE_MUTATION=`mutation cartLinesUpdate($cartId: ID!, $lines: [CartLineUpdateInput!]!) { cartLinesUpdate(cartId: $cartId, lines: $lines) { cart { ...CartFragment } userErrors { field message } } } ${CartFragment}`;export const UPDATE_DISCOUNT_CODE_MUTATION=`mutation cartDiscountCodesUpdate($cartId: ID!, $discountCodes: [String!]) { cartDiscountCodesUpdate(cartId: $cartId, discountCodes: $discountCodes) { cart { ...CartFragment } userErrors { field message code } } } ${CartFragment}`;export const CART_ATTRIBUTES_UPDATE_MUTATION=`mutation cartAttributesUpdate($cartId: ID!, $attributes: [AttributeInput!]!) { cartAttributesUpdate(cartId: $cartId, attributes: $attributes) { cart { ...CartFragment } userErrors { field message } } } ${CartFragment}`;export const CART_BUYER_IDENTITY_UPDATE_MUTATION=`mutation cartBuyerIdentityUpdate($cartId: ID!, $buyerIdentity: CartBuyerIdentityInput!) { cartBuyerIdentityUpdate(cartId: $cartId, buyerIdentity: $buyerIdentity) { cart { ...CartFragment } userErrors { field message } } } ${CartFragment}`;export async function callShopifyAPI(t,r={},{onStart:e,onEnd:n}={}){"function"==typeof e&&e();try{const e=await fetch("/.netlify/functions/shopify-proxy",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:t,variables:r})});if(!e.ok)throw new Error(`Proxy returned ${e.status}`);const n=await e.json();if(n.errors)throw new Error(n.errors[0].message);const a=n.data,o=Object.keys(a)[0];if(a[o]?.userErrors?.length)throw new Error(a[o].userErrors[0].message);return a}finally{"function"==typeof n&&n()}}